#ifndef _PAL3_STATEDATAMANAGER_H_
#define _PAL3_STATEDATAMANAGER_H_

#pragma once

#include "SustainableStateDataInstance.h"
#include "TemporaryStateDataInstance.h"
#include "CountableStateDataInstance.h"
#include "CombatPropertyDataInstance.h"
#include "CombatEnvironmentDataInstance.h"
#include "CombatStateDataInstance.h"
#include "PluginUtility.h"
#include <string>
#include <sstream>

using std::string;
using std::stringstream;

// File paths.
PAL3HOOK_VERIFIED_DATAVAR static const string sustainableStateDataFilePath = ".\\PLUGIN_3.0\\BaseData\\SustainableStateDataInstance.csv";
PAL3HOOK_VERIFIED_DATAVAR static const string temporaryStateDataFilePath = ".\\PLUGIN_3.0\\BaseData\\TemporaryStateDataInstance.csv";
PAL3HOOK_VERIFIED_DATAVAR static const string countableStateDataFilePath = ".\\PLUGIN_3.0\\BaseData\\CountableStateDataInstance.csv";
PAL3HOOK_VERIFIED_DATAVAR static const string combatPropertyDataFilePath = ".\\PLUGIN_3.0\\BaseData\\CombatPropertyDataInstance.csv";
PAL3HOOK_VERIFIED_DATAVAR static const string combatEnvironmentDataFilePath = ".\\PLUGIN_3.0\\BaseData\\CombatEnvironmentDataInstance.csv";
PAL3HOOK_VERIFIED_DATAVAR static const string combatStateDataFilePath = ".\\PLUGIN_3.0\\BaseData\\CombatStateDataInstance.csv";

// Maximum data sizes.
const int maxSustainableStateDataSize = 300;
const int maxTemporaryStateDataSize = 150;
const int maxCountableStateDataSize = 100;
const int maxCombatPropertyDataSize = 50;
const int maxCombatEnvironmentDataSize = 200;
const int maxCombatStateDataSize = 100;

// Size of the buffer used to load the file data.
const int maxBufferSizeForLoadingData = 4096;

// The manager of state data, singleton
class StateDataManager
{
public:

	~StateDataManager();
	static StateDataManager* sharedInstance();

	// MARK: Data processing
	// Data. Generated by function "loadData". DO NOT modify them!
	SustainableStateDataInstance *sustainableStateData; // Status slot 1 and 2.
	TemporaryStateDataInstance *temporaryStateData; // Status slot 3 and 4.
    CountableStateDataInstance *countableStateData; // Status slot 5.
	CombatPropertyDataInstance *combatPropertyData ; // Combat property. 1 slot for the maximum
	CombatEnvironmentDataInstance *combatEnvironmentData; // Combat environment. 3 slots for the maximum
	CombatStateDataInstance *combatStateData; // Combat state. 1 slot for the maximum

	// Identifiers which are used for binary search.
	unsigned int *sustainableStateIdentifierData;
	unsigned int *temporaryStateIdentifierData;
	unsigned int *countableStateIdentifierData;
	unsigned int *combatPropertyIdentifierData;
	unsigned int *combatEnvironmentIdentifierData;
	unsigned int *combatStateIdentifierData;

	// Sized of data.
	unsigned int sustainableStateDataSize;
	unsigned int temporaryStateDataSize;
    unsigned int countableStateDataSize;
	unsigned int combatPropertyDataSize;
	unsigned int combatEnvironmentDataSize;
	unsigned int combatStateDataSize;

	// Function
	// Load status from specific files.
	bool loadData();
	// Using binary search to find a instance related to the provided identifier.
	SustainableStateDataInstance* sustainableStateInstanceForIdentifier(unsigned int identifier);
	TemporaryStateDataInstance* temporaryStateInstanceForIdentifier(unsigned int identifier);
	CountableStateDataInstance* countableStateInstanceForIdentifier(unsigned int identifier);
	CombatPropertyDataInstance* combatPropertyInstanceForIdentifier(unsigned int identifier);
	CombatEnvironmentDataInstance* combatEnvironmentInstanceForIdentifier(unsigned int identifier);
	CombatStateDataInstance* combatStateInstanceForIdentifier(unsigned int identifier);
	
	// MARK: Utility
	// Get a fixed name for a status, including the layer information.
    // std::wstring getFixedName(StateDataRunningInfo *info);
	// Get the state instance for a specific running information.
	// SustainableStateDataInstance* stateInstanceForRunningInfo:(StateDataRunningInfo *info);

	// Description
	// If the size of the member "description" is greater than 1, this function will return it as a customized description instead of the default one.
	// Generate a default description for status slot 1 and 2. 
	static string generateDescriptionForSustainableState(SustainableStateDataInstance *instance, stringstream ss);
	// Generate a default description for status slot 3 and 4.
	static string generateDescriptionForTemporaryState(TemporaryStateDataInstance *instance, stringstream ss);
	// Generate a default description for status slot 5.
	static string generateDescriptionForCountableState(CountableStateDataInstance *instance, stringstream ss);
	// Generate a default description for combat property.
	static string generateDescriptionForCombatProperty(CombatPropertyDataInstance *instance, stringstream ss);
	// Generate a default description for combat environment.
	static string generateDescriptionForCombatEnvironment(CombatEnvironmentDataInstance *instance, stringstream ss);
	// Generate a default description for combat state.
	static string generateDescriptionForCombatState(CombatStateDataInstance *instance, stringstream ss);

	// Initial function
	// Get the description for a specific custom trigger type.
	static string getDescriptionForCustomTriggerType(int index);
	// Get the description for a specific attack type.
	static string getDescriptionForAttackType(int index);
	// Get the description for a specific magic property.
	static string getDescriptionForMagicProperty(int index);
	// Get the description for a basic state.
	static string getDescriptionForBasicState(int index);
	// Get the description for a consumption type.
	static string getDescriptionForConsumptionType(int index);
	// Get the description for a basic action.
	static string getDescriptionForBasicAction(int index);
	// Get the description for a current state.
	static string getDescriptionForCurrentState(int index);
	// Get the description for a temporary state.
	static string getDescriptionForTemporaryState(int index);
	// Get the description for a count value change trigger type with a count value.
	static string getDescriptionForCountableStateCountValueChangeTriggerType(CountableStateCountValueChangeTriggerType type, int countValue);

	// MARK: Debug
	string printData();

private:
	
	StateDataManager();
	StateDataManager(const StateDataManager&);
	StateDataManager& operator = (const StateDataManager&);

	stringstream ss;

	PAL3HOOK_VERIFIED_DATAVAR static StateDataManager *initialInstance;
};

#endif